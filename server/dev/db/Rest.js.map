{"version":3,"sources":["../../src/db/Rest.js"],"names":["require","db","ObjectID","Rest","name","handlerFinish","_collection","collection","_handleFinish","query","id","result","fail","error","res","Promise","findOne","_id","then","resolve","doc","catch","e","skip","limit","sort","find","parseInt","toArray","docs","insertOne","update","updateOne","cr","r","n","deleteOne","ids","deleteMany","results","all","map","push","module","exports"],"mappings":"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","file":"Rest.js","sourcesContent":["const {db}=require('./context');\r\nconst ObjectID = require('mongodb').ObjectID;\r\nclass Rest {\r\n    constructor(name, handlerFinish) {\r\n        this._collection = db.collection(name);\r\n        this._handleFinish = handlerFinish;\r\n    }\r\n    \r\n    get({query, id, result, fail, error, res}) {\r\n        new Promise(resolve => {\r\n            this._collection.findOne(id ? {_id: new ObjectID(id)} : query)\r\n                .then(doc => resolve(doc))\r\n                .catch(e => this._handleFinish(res, error(e)));\r\n        })\r\n            .then(doc => {\r\n                if (doc)\r\n                    this._handleFinish(res, result(doc));\r\n                else\r\n                    this._handleFinish(res, fail());\r\n            })\r\n            .catch(e => {\r\n                this._handleFinish(res, error(e));\r\n            });\r\n    }\r\n    \r\n    gets({query, result, fail, error, res, skip = 0, limit = 5, sort = {},}) {\r\n        new Promise(resolve => {\r\n            this._collection.find(query).sort(sort).skip(parseInt(skip)).limit(parseInt(limit)).toArray()\r\n                .then(docs => resolve(docs))\r\n                .catch(e => this._handleFinish(res, error(e)));\r\n        })\r\n            .then(docs => {\r\n                this._handleFinish(res, result(docs))\r\n            })\r\n            .catch(e => {\r\n                this._handleFinish(res, error(e));\r\n            });\r\n    }\r\n    \r\n    post({doc, result, error, res,}) {\r\n        new Promise(resolve => {\r\n            this._collection.insertOne(doc)\r\n                .then(() => resolve())\r\n                .catch(e => this._handleFinish(res, error(e)));\r\n        })\r\n            .then(() => {\r\n                this._handleFinish(res, result());\r\n            })\r\n            .catch(e => {\r\n                this._handleFinish(res, error(e));\r\n            });\r\n    }\r\n    \r\n    put({query, id, result, fail, error, res, update}) {\r\n        new Promise(resolve => {\r\n            this._collection.updateOne(id ? {_id: new ObjectID(id)} : query, update)\r\n                .then(cr => {\r\n                    resolve(cr.result);\r\n                })\r\n                .catch(e => this._handleFinish(res, error(e)));\r\n        })\r\n            .then(r => {\r\n                if (r.n === 0)\r\n                    this._handleFinish(res, fail());\r\n                else\r\n                    this._handleFinish(res, result());\r\n            })\r\n            .catch(e => this._handleFinish(res, error(e)));\r\n    }\r\n    \r\n    delete({query, id, result, fail, error, res,}) {\r\n        new Promise(resolve => {\r\n            this._collection.deleteOne(id ? {_id: new ObjectID(id)} : query)\r\n                .then(cr => resolve(cr.result))\r\n                .catch(e => this._handleFinish(res, error(e)));\r\n        })\r\n            .then(r => {\r\n                if (r.n === 0)\r\n                    this._handleFinish(res, fail());\r\n                else\r\n                    this._handleFinish(res, result());\r\n            })\r\n            .catch(e => this._handleFinish(res, error(e)));\r\n    }\r\n    \r\n    deletes({query, ids, result, fail, error, res,}) {\r\n        new Promise(resolve => {\r\n            if (query) {\r\n                this._collection.deleteMany(query)\r\n                    .then(cr => {\r\n                        if (cr.result.n === 0)\r\n                            resolve(fail());\r\n                        else\r\n                            resolve(result());\r\n                    })\r\n            }\r\n            else {\r\n                let results = [];\r\n                Promise.all(ids.map(id =>\r\n                    this._collection.deleteOne({_id: new ObjectID(id)})\r\n                        .then(cr => {\r\n                            if (cr.result.n === 0)\r\n                                results.push(fail());\r\n                            else\r\n                                results.push(result());\r\n                        })))\r\n                    .then(() => resolve(results));\r\n            }\r\n        })\r\n            .then(result => {\r\n                this._handleFinish(res, result);\r\n            })\r\n            .catch(e => {\r\n                this._handleFinish(res, error(e));\r\n            });\r\n    }\r\n}\r\nmodule.exports = Rest;"]}